"""
App Info System - Handles application information queries
"""
import logging
from typing import Optional, Dict

logger = logging.getLogger(__name__)

class AppInfoSystem:
    def __init__(self, openai_client):
        self.openai_client = openai_client
        self.app_info = {}
        self._setup_app_info_system()
    
    def _setup_app_info_system(self):
        """Setup app information system."""
        self.app_info = {
            "h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng": {
                "question": "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng",
                "answer": "·ª®ng d·ª•ng Tr·ª£ l√Ω Ph√°p l√Ω AI gi√∫p b·∫°n tra c·ª©u th√¥ng tin ph√°p lu·∫≠t v·ªÅ b·∫£o v·ªá m√¥i tr∆∞·ªùng Vi·ªát Nam:\n\n"
                         "üîç **C√°ch s·ª≠ d·ª•ng:**\n"
                         "‚Ä¢ ƒê·∫∑t c√¢u h·ªèi b·∫±ng ti·∫øng Vi·ªát v·ªÅ c√°c v·∫•n ƒë·ªÅ ph√°p l√Ω m√¥i tr∆∞·ªùng\n"
                         "‚Ä¢ T√¨m ki·∫øm ƒëi·ªÅu lu·∫≠t, quy ƒë·ªãnh c·ª• th·ªÉ\n"
                         "‚Ä¢ H·ªá th·ªëng s·∫Ω t√¨m ki·∫øm trong c∆° s·ªü d·ªØ li·ªáu ph√°p lu·∫≠t v√† ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ch√≠nh x√°c\n"
            },
            "t√≠nh nƒÉng": {
                "question": "C√°c t√≠nh nƒÉng c·ªßa ·ª©ng d·ª•ng",
                "answer": "üîß **T√≠nh nƒÉng ch√≠nh:**\n\n"
                         "1. **Tra c·ª©u ph√°p lu·∫≠t th√¥ng minh:** S·ª≠ d·ª•ng AI ƒë·ªÉ hi·ªÉu c√¢u h·ªèi v√† t√¨m th√¥ng tin ch√≠nh x√°c\n"
                         "2. **T√¨m ki·∫øm ƒëi·ªÅu lu·∫≠t nhanh:** Tra c·ª©u nhanh c√°c ƒëi·ªÅu, ch∆∞∆°ng, m·ª•c trong lu·∫≠t\n"
                         "3. **Ngu·ªìn tham kh·∫£o:** Lu√¥n cung c·∫•p ngu·ªìn g·ªëc th√¥ng tin v√† chi ti·∫øt ƒëi·ªÅu lu·∫≠t\n"
                         "4. **Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát:** Giao di·ªán v√† c√¢u tr·∫£ l·ªùi ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát\n"
            },
            "li√™n h·ªá h·ªó tr·ª£": {
                "question": "Th√¥ng tin li√™n h·ªá v√† h·ªó tr·ª£",
                "answer": "üìû **H·ªó tr·ª£ k·ªπ thu·∫≠t:**\n\n"
                         "‚Ä¢ Email: support@legalai.vn\n"
                         "‚Ä¢ Website: www.legalai.vn\n\n"
                         "üìù **G√≥p √Ω c·∫£i thi·ªán:**\n"
                         "‚Ä¢ B√°o l·ªói th√¥ng tin kh√¥ng ch√≠nh x√°c\n"
                         "‚Ä¢ ƒê·ªÅ xu·∫•t th√™m t√≠nh nƒÉng m·ªõi\n"
                         "‚Ä¢ Ph·∫£n h·ªìi v·ªÅ tr·∫£i nghi·ªám s·ª≠ d·ª•ng\n"
                         "‚Ä¢ Y√™u c·∫ßu th√™m vƒÉn b·∫£n ph√°p lu·∫≠t m·ªõi"
            },
            "th√¥ng tin app": {
                "question": "B·∫°n l√† ai? ·ª®ng d·ª•ng n√†y l√†m g√¨?",
                "answer": "**T√¥i l√† App tra c·ª©u vƒÉn b·∫£n ph√°p l√Ω v·ªÅ B·∫£o v·ªá M√¥i tr∆∞·ªùng**\n\n"
                         "T√¥i l√† tr·ª£ l√Ω AI chuy√™n h·ªó tr·ª£ tra c·ª©u c√°c vƒÉn b·∫£n ph√°p lu·∫≠t li√™n quan ƒë·∫øn b·∫£o v·ªá m√¥i tr∆∞·ªùng t·∫°i Vi·ªát Nam.\n\n"
                         "üîç **T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:**\n"
                         "‚Ä¢ Tra c·ª©u c√°c ƒëi·ªÅu lu·∫≠t v·ªÅ b·∫£o v·ªá m√¥i tr∆∞·ªùng\n"
                         "‚Ä¢ H·ªó tr·ª£ th√¥ng tin v·ªÅ quy ƒë·ªãnh, th·ªß t·ª•c ph√°p l√Ω\n"
                         "‚Ä¢ Gi·∫£i th√≠ch c√°c quy ƒë·ªãnh ph·ª©c t·∫°p m·ªôt c√°ch d·ªÖ hi·ªÉu\n"
                         "‚Ä¢ Cung c·∫•p ngu·ªìn t√†i li·ªáu tham kh·∫£o ch√≠nh x√°c"
            }
        }

    def _find_app_info_match(self, question: str) -> Optional[Dict]:
        """Find matching app information using GPT-based semantic similarity."""
        if not self.openai_client:
            return None
            
        try:
            # Create app questions list
            app_questions = []
            for info in self.app_info.values():
                app_questions.append(info["question"])
            
            # Create similarity checking prompt
            similarity_prompt = f"""
C√¢u h·ªèi ng∆∞·ªùi d√πng: "{question}"

Danh s√°ch c√¢u h·ªèi v·ªÅ ·ª©ng d·ª•ng:
1. {app_questions[0]}
2. {app_questions[1]} 
3. {app_questions[2]}
4. {app_questions[3]}

H√£y ƒë√°nh gi√° xem c√¢u h·ªèi ng∆∞·ªùi d√πng c√≥ √Ω nghƒ©a t∆∞∆°ng t·ª± v·ªõi c√¢u h·ªèi n√†o trong danh s√°ch kh√¥ng?

Tr·∫£ l·ªùi ch·ªâ m·ªôt trong c√°c gi√° tr·ªã sau:
- "0" n·∫øu KH√îNG t∆∞∆°ng t·ª± v·ªõi b·∫•t k·ª≥ c√¢u h·ªèi n√†o
- "1" n·∫øu t∆∞∆°ng t·ª± v·ªõi c√¢u h·ªèi s·ªë 1
- "2" n·∫øu t∆∞∆°ng t·ª± v·ªõi c√¢u h·ªèi s·ªë 2
- "3" n·∫øu t∆∞∆°ng t·ª± v·ªõi c√¢u h·ªèi s·ªë 3
- "4" n·∫øu t∆∞∆°ng t·ª± v·ªõi c√¢u h·ªèi s·ªë 4

Ch·ªâ tr·∫£ l·ªùi M·ªòT S·ªê duy nh·∫•t:"""

            response = self.openai_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": similarity_prompt}],
                max_tokens=10,
                temperature=0
            )
            
            result = response.choices[0].message.content.strip()
            app_keys = list(self.app_info.keys())
            
            if result in ["1", "2", "3", "4"]:
                index = int(result) - 1
                if index < len(app_keys):
                    return self.app_info[app_keys[index]]
            
            return None
                
        except Exception as e:
            logger.error(f"Error in app info similarity check: {e}")
            return None

    def handle_app_info_query(self, question: str) -> Optional[Dict]:
        """Handle app information queries."""
        app_match = self._find_app_info_match(question)
        if app_match:
            return {
                'answer': app_match['answer'],
                'sources': [],
                'query': question,
                'num_sources': 0,
                'is_app_info': True
            }
        return None